{
	"name": "breed_dim_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "STG_SNOWFLAKE",
						"type": "DatasetReference"
					},
					"name": "StgSnowflake"
				},
				{
					"dataset": {
						"referenceName": "BreedDim",
						"type": "DatasetReference"
					},
					"name": "BreedDimSrc",
					"description": "Import data from BreedDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "BreedDim",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregateBreed"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LIC_ISSUE_DATE as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          SPECIES as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          JOB_EXC_ID as string,",
				"          JOB_EXC_DT as string,",
				"          PRIMARY_BREED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> StgSnowflake",
				"source(output(",
				"          MAXBREEDSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(Max(BREED_SK),0) as MaxBreedSk from DAMG7370_SCHEMA.BREED_DIM',",
				"     format: 'query') ~> BreedDimSrc",
				"StgSnowflake, BreedDimSrc join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(SECONDARY_BREED,",
				"          SPECIES,",
				"          PRIMARY_BREED,",
				"          MAXBREEDSK),",
				"     CountRow = count(LICENSE_NUMBER)) ~> aggregateBreed",
				"aggregateBreed keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink1"
			]
		}
	}
}