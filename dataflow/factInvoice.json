{
	"name": "factInvoice",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SalesStg",
						"type": "DatasetReference"
					},
					"name": "SalesStg"
				},
				{
					"dataset": {
						"referenceName": "orphan",
						"type": "DatasetReference"
					},
					"name": "OrphanInvoice"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable8",
						"type": "DatasetReference"
					},
					"name": "custDim"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable9",
						"type": "DatasetReference"
					},
					"name": "MaxInvoiceSk"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "orphan",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "loadInvoice",
						"type": "DatasetReference"
					},
					"name": "loadFctInvoice"
				}
			],
			"transformations": [
				{
					"name": "MergeOrphan"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Di_Job_Id as string",
				"}",
				"source(output(",
				"          INVOICEID as decimal(30,0),",
				"          CUSTOMERID as decimal(30,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTOCITY as string,",
				"          SHIPTOCOUNTRY as string,",
				"          SALESPERSONID as string,",
				"          SALESPERSONNAME as string,",
				"          TOTALPRODUCTCOUNT as decimal(10,4),",
				"          TOTAL as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SalesStg",
				"source(output(",
				"          INVOICEID as decimal(30,0),",
				"          CUSTOMERID as decimal(30,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTOCITY as string,",
				"          SHIPTOCOUNTRY as string,",
				"          SALESPERSONID as string,",
				"          SALESPERSONNAME as string,",
				"          TOTALPRODUCTCOUNT as decimal(10,4),",
				"          TOTAL as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> OrphanInvoice",
				"source(output(",
				"          CUSTOMER_SK as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          CUSTOMER_NAME as string,",
				"          DI_CREATEDDT as timestamp,",
				"          PID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> custDim",
				"source(output(",
				"          MAXCUSTOMERSK as decimal(30,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(customer_SK),0) as MaxCustomerSK from damg7370_schema.fct_invoice',",
				"     format: 'query') ~> MaxInvoiceSk",
				"SalesStg, OrphanInvoice union(byName: true)~> MergeOrphan",
				"MergeOrphan, custDim join(CUSTOMERID == CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull(CUSTOMER_ID),",
				"     disjoint: false) ~> split1@(CustomerIdNotFound, CustomerIdFound)",
				"split1@CustomerIdFound keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 select(mapColumn(",
				"          INVOICEID,",
				"          INVOICEDATE,",
				"          TOTALPRODUCTCOUNT,",
				"          TOTAL,",
				"          CUSTOMER_SK,",
				"          RowNum",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, MaxInvoiceSk join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(invoice_sk = MAXCUSTOMERSK+RowNum,",
				"          DI_CreatedDt = currentDate(),",
				"          pid = $Di_Job_Id) ~> derivedColumn1",
				"split1@CustomerIdNotFound sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INVOICE_SK as decimal(30,0),",
				"          INVOICE_ID as decimal(30,0),",
				"          CUSTOMER_SK as decimal(30,0),",
				"          INVOICE_DT as date,",
				"          TOTAL_PRODUCT_CNT as decimal(30,0),",
				"          TOTAL_PRODUCT_COST as decimal(30,0),",
				"          DI_CREATEDDT as timestamp,",
				"          PID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICE_ID = INVOICEID,",
				"          CUSTOMER_SK,",
				"          INVOICE_DT = INVOICEDATE,",
				"          TOTAL_PRODUCT_CNT = TOTALPRODUCTCOUNT,",
				"          TOTAL_PRODUCT_COST = TOTAL,",
				"          DI_CREATEDDT,",
				"          PID",
				"     )) ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INVOICE_SK as decimal(30,0),",
				"          INVOICE_ID as decimal(30,0),",
				"          CUSTOMER_SK as decimal(30,0),",
				"          INVOICE_DT as date,",
				"          TOTAL_PRODUCT_CNT as decimal(30,0),",
				"          TOTAL_PRODUCT_COST as decimal(30,0),",
				"          DI_CREATEDDT as timestamp,",
				"          PID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICE_SK = invoice_sk,",
				"          INVOICE_ID = INVOICEID,",
				"          CUSTOMER_SK,",
				"          INVOICE_DT = INVOICEDATE,",
				"          TOTAL_PRODUCT_CNT = TOTALPRODUCTCOUNT,",
				"          TOTAL_PRODUCT_COST = TOTAL,",
				"          DI_CREATEDDT = DI_CreatedDt,",
				"          PID = pid",
				"     )) ~> loadFctInvoice"
			]
		}
	}
}